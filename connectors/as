import numpy as np
import math

A = np.array([[3.0, 1.0, 0., 0., 0., 0., 0., 0., 0., 0.], [1.0, 3.0, 1.0, 0., 0., 0., 0., 0., 0., 0.], [0., 1.0, 3.0, 1.0, 0., 0., 0., 0., 0., 0.], [0., 0, 1.0, 3.0, 1.0, 0., 0., 0., 0., 0.], [0., 0., 0., 1.0, 3.0, 1.0, 0., 0., 0., 0.], [
             0., 0., 0., 0., 1.0, 3.0, 1.0, 0., 0., 0.], [0., 0., 0., 0., 0., 1.0, 3.0, 1.0, 0., 0.], [0., 0., 0., 0., 0., 0., 1.0, 3.0, 1.0, 0.], [0., 0., 0., 0., 0., 0., 0., 1.0, 3.0, 1.0], [0., 0., 0., 0., 0., 0., 0., 0., 1.0, 3.0]])
b = np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
x0 = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tol = 1e-5
max_iter = 20
w = 1.5


def SOR(A, b, x0, tol, max_iter, w):
    if (w <= 1 or w > 2):
        print('w should be inside [1, 2)')
        step = -1
        x = float('nan')
        return
    n = b.shape
    x = x0

    for step in range(1, max_iter):
        for i in range(n[0]):
            new_values_sum = np.dot(A[i, :i], x[:i])
            old_values_sum = np.dot(A[i, i+1:], x0[i+1:])
            x[i] = (b[i] - (old_values_sum + new_values_sum)) / A[i, i]
            x[i] = np.dot(x[i], w) + np.dot(x0[i], (1 - w))
        # if (np.linalg.norm(x - x0) < tol):
        if (np.linalg.norm(np.dot(A, x)-b) < tol):
            print(step)
            break
        x0 = x

    print("X = {}".format(x))
    print("The number of iterations is: {}".format(step))
    return x


x = SOR(A, b, x0, tol, max_iter, w)
print(np.dot(A, x))
